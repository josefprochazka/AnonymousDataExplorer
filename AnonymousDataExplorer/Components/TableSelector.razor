@rendermode InteractiveServer
@using AnonymousDataExplorer.Services
@using Telerik.Blazor.Components
@inject DatabaseService DbService

<h4>Výběr tabulky</h4>

@* ========== comboBox ========== *@
@if (Tables.Count == 0)
{
    <p style="color:red">Žádné tabulky nenalezeny</p>
}
else
{
    <select @onchange="OnTableChanged">
        <option value="">-- vyber tabulku --</option>
        @foreach (var table in Tables)
        {
            <option value="@table">@table</option>
        }
    </select>
}

@* ========== grid + button New ========== *@
@if (!string.IsNullOrEmpty(SelectedTable) && ColumnNames.Count > 0)
{
    <h4>Data v tabulce @SelectedTable</h4>

    <button class="btn btn-success mb-3"
            @onclick="CreateNewItem"
            disabled="@string.IsNullOrEmpty(SelectedTable)">
        Přidat nový záznam
    </button>

    @if (ShowGrid && !string.IsNullOrEmpty(SelectedTable) && ColumnNames.Count > 0)
    {
        <TelerikGrid Data="@DataRows" Pageable="true" Groupable="true" Height="500px">
            <GridColumns>
                @foreach (var col in ColumnNames)
                {
                    <GridColumn Field="@col" Title="@col" FieldType="typeof(object)" />
                }
                <GridColumn Title="Akce" Width="280px">
                    <Template Context="rowObj">
                        <button class="btn btn-info btn-sm"
                                @onclick="() => DetailItem((Dictionary<string, object>)rowObj)">
                            Zobrazit Detail
                        </button>
                        <button class="btn btn-primary btn-sm"
                                @onclick="() => EditItem((Dictionary<string, object>)rowObj)">
                            Editovat
                        </button>
                        <button class="btn btn-danger btn-sm"
                                @onclick="() => DeleteItem((Dictionary<string, object>)rowObj)">
                            Smazat
                        </button>
                    </Template>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>
    }
}

@* ========== dialog for editing ========== *@
@if (EditDialogVisible)
{
    <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editace záznamu</h5>
                    <button type="button" class="btn-close" @onclick="() => EditDialogVisible = false"></button>
                </div>
                <div class="modal-body">
                    @foreach (var col in ColumnNames)
                    {
                        <div class="mb-2">
                            <label>@col</label>
                            <input class="form-control" @bind="EditRowString[col]" />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => EditDialogVisible = false">Zrušit</button>
                    <button class="btn btn-primary" @onclick="SaveEditAsync">Uložit</button>
                </div>
            </div>
        </div>
    </div>
}

@* ========== dialog for readonly ========== *@
@if (ReadOnlyDialogVisible)
{
    <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detail záznamu</h5>
                    <button type="button" class="btn-close" @onclick="() => ReadOnlyDialogVisible = false"></button>
                </div>
                <div class="modal-body">
                    @foreach (var col in ColumnNames)
                    {
                        <div class="mb-2">
                            <label>@col</label>
                            <input class="form-control" value="@DetailRowString[col]" readonly />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => ReadOnlyDialogVisible = false">Zavřít</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    #region Fields and Properties

    private List<string> Tables = new();
    private string? SelectedTable;
    private List<string> ColumnNames = new();
    private List<Dictionary<string, object>> DataRows = new();

    private Dictionary<string, object> EditRow = new();
    private Dictionary<string, string> EditRowString = new();
    private object? EditKey; // primary key for saving etc.
    private bool EditDialogVisible = false;

    private Dictionary<string, string> DetailRowString = new();
    private bool ReadOnlyDialogVisible = false;

    private bool ShowGrid = true;

    #endregion Fields and Properties

    #region Create, Show, Edit, Delete methods

    private void CreateNewItem()
    {
        if (string.IsNullOrEmpty(SelectedTable))
            return;

        EditRow = new Dictionary<string, object>();
        EditRowString = ColumnNames.ToDictionary(col => col, col => "");
        EditKey = null; // new record without existing PK
        EditDialogVisible = true;
    }

    private void DetailItem(Dictionary<string, object> item)
    {
        DetailRowString = item.ToDictionary(x => x.Key, x => x.Value?.ToString() ?? "");
        ReadOnlyDialogVisible = true;
    }

    private void EditItem(Dictionary<string, object> item)
    {
        EditRow = new(item);
        EditRowString = item.ToDictionary(x => x.Key, x => x.Value?.ToString() ?? "");
        EditKey = GetPkValue(item);
        EditDialogVisible = true;
    }

    private async Task SaveEditAsync()
    {
        if (SelectedTable is null || ColumnNames.Count == 0)
            return;

        var keyColumn = await DbService.GetPrimaryKeyColumnAsync(SelectedTable);
        if (keyColumn is null)
            return;

        foreach (var col in ColumnNames)
        {
            EditRow[col] = EditRowString[col];
        }

        if (EditKey is null)
        {
            var insertedId = await DbService.InsertRowAsync(SelectedTable, keyColumn, EditRow);
            var newRow = await DbService.GetRowByIdAsync(SelectedTable, keyColumn, insertedId);
            //DataRows.Add(newRow);

            var list = DataRows.ToList(); // kopie
            list.Add(newRow);             // nebo list[index] = updatedRow
            DataRows = list;              // přiřazení spustí rerender
        }
        else
        {
            await DbService.UpdateRowAsync(SelectedTable, keyColumn, EditKey, EditRow);
            var updatedRow = await DbService.GetRowByIdAsync(SelectedTable, keyColumn, EditKey);
            var index = DataRows.FindIndex(row => row[keyColumn]?.ToString() == EditKey.ToString());
            // if (index >= 0)
            //     DataRows[index] = updatedRow;

            var list = DataRows.ToList(); // kopie

            if (index >= 0)
                list[index] = updatedRow;

            DataRows = list;              // přiřazení spustí rerender
        }

        


        EditDialogVisible = false;
    }

    private async void DeleteItem(Dictionary<string, object> item)
    {
        if (SelectedTable is null)
            return;

        var keyColumn = await DbService.GetPrimaryKeyColumnAsync(SelectedTable);
        var keyValue = GetPkValue(item);

        if (keyColumn is null || keyValue is null)
            return;

        await DbService.DeleteRowAsync(SelectedTable, keyColumn, keyValue);
        DataRows = await DbService.GetDataRowsAsync(SelectedTable);
    }

    #endregion Create, Show, Edit, Delete

    #region Other methods

    protected override async Task OnInitializedAsync() // calling on init
    {
        Tables = await DbService.GetTableNamesAsync();
    }

    private async Task OnTableChanged(ChangeEventArgs e)
    {
        SelectedTable = e.Value?.ToString();

        ShowGrid = false; // hide grid
        StateHasChanged(); // rerender

        await Task.Delay(50); // pause to be sure

        if (!string.IsNullOrEmpty(SelectedTable))
        {
            ColumnNames = await DbService.GetColumnNamesOnlyAsync(SelectedTable);
            DataRows = await DbService.GetDataRowsAsync(SelectedTable);
        }
        else
        {
            ColumnNames.Clear();
            DataRows.Clear();
        }

        ShowGrid = true; // show grid
    }

    private object? GetPkValue(Dictionary<string, object> item)
    {
        return item.Count > 0 ? item.First().Value : null; // PK is loaded first
    }

    #endregion Other methods

}

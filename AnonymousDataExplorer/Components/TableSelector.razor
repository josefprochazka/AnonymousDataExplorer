@rendermode InteractiveServer
@using AnonymousDataExplorer.Services
@using Telerik.Blazor.Components
@inject DatabaseService DbService

<h4>Výběr tabulky</h4>

@if (Tables.Count == 0)
{
    <p style="color:red">Žádné tabulky nenalezeny</p>
}
else
{
    <select @onchange="OnTableChanged">
        <option value="">-- vyber tabulku --</option>
        @foreach (var table in Tables)
        {
            <option value="@table">@table</option>
        }
    </select>
}

@if (!string.IsNullOrEmpty(SelectedTable) && ColumnNames.Count > 0)
{
    <h4>Data v tabulce @SelectedTable</h4>

    <TelerikGrid Data="@DataRows" Pageable="true" Groupable="true" Height="500px">
        <GridColumns>
            <GridColumn Title="Akce" Width="220px">
                <Template Context="rowObj">
                    <button class="btn btn-primary btn-sm"
                            @onclick="() => EditItem((Dictionary<string, object>)rowObj)">
                        Editovat
                    </button>
                    <button class="btn btn-info btn-sm"
                            @onclick="() => DetailItem((Dictionary<string, object>)rowObj)">
                        Detail
                    </button>
                    <button class="btn btn-danger btn-sm"
                            @onclick="() => DeleteItem((Dictionary<string, object>)rowObj)">
                        Smazat
                    </button>
                </Template>
            </GridColumn>
            @foreach (var col in ColumnNames)
            {
                <GridColumn Field="@col" Title="@col" FieldType="typeof(object)" />
            }
        </GridColumns>
    </TelerikGrid>
}

@if (EditDialogVisible)
{
    <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Editace záznamu</h5>
                    <button type="button" class="btn-close" @onclick="() => EditDialogVisible = false"></button>
                </div>
                <div class="modal-body">
                    @foreach (var col in ColumnNames)
                    {
                        <div class="mb-2">
                            <label>@col</label>
                            <input class="form-control" @bind="EditRowString[col]" />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => EditDialogVisible = false">Zrušit</button>
                    <button class="btn btn-primary" @onclick="SaveEditAsync">Uložit</button>
                </div>
            </div>
        </div>
    </div>
}

@if (DetailDialogVisible)
{
    <div class="modal show d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Detail záznamu</h5>
                    <button type="button" class="btn-close" @onclick="() => DetailDialogVisible = false"></button>
                </div>
                <div class="modal-body">
                    @foreach (var col in ColumnNames)
                    {
                        <div class="mb-2">
                            <label>@col</label>
                            <input class="form-control" value="@DetailRowString[col]" readonly />
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => DetailDialogVisible = false">Zavřít</button>
                </div>
            </div>
        </div>
    </div>
}


@code {
    private List<string> Tables = new();
    private string? SelectedTable;
    private List<string> ColumnNames = new();
    private List<Dictionary<string, object>> DataRows = new();

    private Dictionary<string, object> EditRow = new();   // originál řádek
    private Dictionary<string, string> EditRowString = new(); // stringView pro editaci
    private object? EditKey;
    private bool EditDialogVisible = false;

    private Dictionary<string, string> DetailRowString = new();
    private bool DetailDialogVisible = false;

    protected override async Task OnInitializedAsync()
    {
        Tables = await DbService.GetTableNamesAsync();
    }

    private async Task OnTableChanged(ChangeEventArgs e)
    {
        SelectedTable = e.Value?.ToString();
        if (!string.IsNullOrEmpty(SelectedTable))
        {
            ColumnNames = await DbService.GetColumnNamesOnlyAsync(SelectedTable);
            DataRows = await DbService.GetDataRowsAsync(SelectedTable);
        }
        else
        {
            ColumnNames.Clear();
            DataRows.Clear();
        }
    }

    private void EditItem(Dictionary<string, object> item)
    {
        EditRow = new(item);
        EditRowString = item.ToDictionary(x => x.Key, x => x.Value?.ToString() ?? "");
        EditKey = GetPkValue(item);
        EditDialogVisible = true;
    }

    private async Task SaveEditAsync()
    {
        if (SelectedTable is null || string.IsNullOrEmpty(SelectedTable) || ColumnNames.Count == 0)
            return;

        var keyColumn = ColumnNames.First();
        foreach (var col in ColumnNames)
        {
            EditRow[col] = EditRowString[col];
        }

        await DbService.UpdateRowAsync(SelectedTable, keyColumn, EditKey!, EditRow);
        DataRows = await DbService.GetDataRowsAsync(SelectedTable);
        EditDialogVisible = false;
    }

    private void DetailItem(Dictionary<string, object> item)
    {
        DetailRowString = item.ToDictionary(x => x.Key, x => x.Value?.ToString() ?? "");
        DetailDialogVisible = true;
    }


    private void DeleteItem(Dictionary<string, object> item)
    {
        Console.WriteLine($"Smazat: {GetPkValue(item)}");
        // TODO: Mazání
    }

    private object? GetPkValue(Dictionary<string, object> item)
    {
        return item.Count > 0 ? item.First().Value : null;
    }
}
